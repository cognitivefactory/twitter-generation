import os
import re
import logging

from ..helper.auto_numbered import AutoNumberedEnum


__all__ = ["ExportAdapterFormat", "ExportAdapter"]


class ExportAdapterFormat(AutoNumberedEnum):
    CSV = ()


class ExportAdapter:
    def __init__(self, path: str = "a.out") -> None:
        self.logger = logging.getLogger("ea")
        self.__path = path
        try:
            os.makedirs(os.path.dirname(self.__path))
        except (FileExistsError, FileNotFoundError):
            pass

    def export(
        self, topic: str, sentiment: str, data: str, format: ExportAdapterFormat = ExportAdapterFormat.CSV
    ) -> None:
        match format:
            case ExportAdapterFormat.CSV:
                # data is a text generated by the model
                # it should contain a list of tweets beginning with a number and a dot (1. )
                # and ending with a newline or EOF
                tweets: list[str] = re.findall(r"\d+\.\s.*\n", data)
                tweets = list(map(lambda t: t[t.find(".") + 1 : -1].strip(), tweets))
                self.logger.debug("got %d tweets", len(tweets))
                with open(self.__path, "a", encoding="utf-8") as f:  # add to file
                    for tweet in tweets:
                        f.write(f"{topic}\t{sentiment}\t{tweet}\n")

                with open(f"{self.__path}.raw", "a", encoding="utf-8") as f:
                    # hehe
                    f.write(f"\n\n---\n{topic} {sentiment}\n")
                    f.write(data)

            case _:
                raise NotImplementedError(f"Export format {format} is not supported.")
