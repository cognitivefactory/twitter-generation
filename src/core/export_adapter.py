import os
import logging

from ..helper.auto_numbered import AutoNumberedEnum


__all__ = ["ExportAdapterFormat", "ExportAdapter"]


class ExportAdapterFormat(AutoNumberedEnum):
    CSV = ()


class ExportAdapter:
    def __init__(self, path: str = "a.out") -> None:
        self.logger = logging.getLogger("ea")
        self.__path = path
        try:
            os.makedirs(os.path.dirname(self.__path))
        except (FileExistsError, FileNotFoundError):
            pass

    def export(
        self, topic: str, sentiment: str, data: str, format: ExportAdapterFormat = ExportAdapterFormat.CSV
    ) -> None:
        with open(f"{self.__path}.raw", "a", encoding="utf-8") as f:
            # hehe
            f.write(f"\n\n---\n{topic} {sentiment}\n")
            f.write(data)
        match format:
            case ExportAdapterFormat.CSV:
                # data is a text generated by the model
                # it should contain a list of tweets beginning with a number and a dot (1. )
                # and ending with the next number and dot (2. ) (or simply the end of the string for the last tweet)
                # tweets: list[str] = re.findall(r"\d+\.\s.*?(?=\d+\.\s|$)", data, flags=re.DOTALL)

                current_dot = 1
                tweets: list[str] = []

                while True:
                    # find the next number and dot
                    next_dot = data.find(str(current_dot + 1) + ". ")
                    if next_dot == -1:
                        # the last tweet does not end with a number and dot
                        tweets.append(data)
                        break
                    # extract the tweet
                    tweet = data[:next_dot]
                    tweets.append(tweet)
                    # update the data
                    data = data[next_dot:]
                    # update the current dot
                    current_dot += 1

                tweets = list(map(lambda t: t[t.find(".") + 1 :].strip().replace("\n", " "), tweets))

                self.logger.debug("got %d tweets", len(tweets))
                with open(self.__path, "a", encoding="utf-8") as f:  # add to file
                    for tweet in tweets:
                        f.write(f"{topic}\t{sentiment}\t{tweet}\n")

            case _:
                raise NotImplementedError(f"Export format {format} is not supported.")
